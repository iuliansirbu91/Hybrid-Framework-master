package com.totsy.UI;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.Properties;



import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.ScrollPaneConstants;
import javax.swing.text.DefaultCaret;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;

import javax.swing.JButton;
import javax.swing.JFileChooser;

//import java.awt.event.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import com.totsy.logs.TextAreaOutputStream;
import com.totsy.test.DriverScript;

import javax.swing.ButtonGroup;

import javax.swing.JTextArea;

import java.awt.Color;

import javax.swing.JRadioButton;
import java.awt.Component;


public class ApplicationUI extends JFrame{
	public static Properties CONFIG;
    public static Properties OR;
    public static String string;
    public static String radioButton;
    public static String screenshot_everystep;
    public static final String Y= "Y";
    public static final String N= "N";
    
    
//    private ButtonGroup radioGroup;
	private JRadioButton rdbtnNewRadioButton,rdbtnNewRadioButton_1;
	private JButton browse1;
	private JButton browse2;
	private JButton browse3;
//	private JButton start;
	private JTextField item1;
	private JTextField item2;
	private JTextField item3;
	public JTextArea textArea;
	private TextAreaOutputStream textAreaOutputStream;
	
//	private JPasswordField passwordField;
//	private JTextField textField;
	private JButton btnRun;
	private FileInputStream fs1;
	private FileInputStream fs;
	
	private PrintStream standardOut;
	private JScrollPane scrollBar;
	private JScrollPane scrollPane;
	
	public ApplicationUI() {
		super("OBAutoDev");
	
	thehandler handler = new thehandler();
//	JFrame frame = new JFrame();
	   
		browse1 = new JButton("Browse");
		browse1.setBounds(96, 77, 80, 23);
		browse1.addActionListener(handler);
		
		item1 = new JTextField("C:\\Users\\isirbu\\Desktop\\Documente\\Automation\\xls\\Suite.xlsx");
		item1.setBounds(205, 78, 482, 20);
	//	item1.setEditable(false);
		item1.addActionListener(handler);
	
		browse2 = new JButton("Browse");
		browse2.setBounds(96, 111, 80, 23);
		browse2.addActionListener(handler);
	
	item2 = new JTextField("C:\\Users\\isirbu\\Desktop\\Documente\\Automation\\xls\\or.properties");
	item2.setBounds(205, 112, 482, 20);
//	System.out.println(item2.getText());
	getContentPane().setLayout(null);
	//JTextArea log = new JTextArea();
	//System.out.println("text de afisat in jarea");
	
	textArea = new JTextArea(16,58);
	textArea.setAlignmentX(Component.RIGHT_ALIGNMENT);
	textArea.setBounds(22, 227, 562, 180);
	textArea.setEditable(false);
	
	  textArea.setColumns(20);
	  textArea.setRows(5);
	  //    DefaultCaret caret = (DefaultCaret)textArea.getCaret();
	  //    caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
	     // textArea.setPreferredSize(new Dimension(50,50));
	   //   
	      
	      scrollPane = new JScrollPane(textArea);
	      scrollPane.setAlignmentX(Component.RIGHT_ALIGNMENT);
	      scrollPane.setAutoscrolls(true);
	      scrollPane.setBounds(22, 291, 792, 293);
	      //	scrollPane.setViewportView(textArea);
	          scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
	          scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
	          
	          

	getContentPane().add(scrollPane);
	          // textArea.setEditable(false);

  //  getContentPane().add(textArea);
//	getContentPane().add(scrollPane);
	getContentPane().add(browse1);
	getContentPane().add(item1);
	getContentPane().add(browse2);
	getContentPane().add(item2);
	
	browse3 = new JButton("Browse");
	browse3.setBounds(96, 145, 80, 23);
	browse3.addActionListener(handler);
	getContentPane().add(browse3);
	
	item3 = new JTextField("C:\\Users\\isirbu\\Desktop\\Documente\\Automation\\xls\\config.properties");
	item3.setBounds(205, 148, 482, 20);
//	item3.setEditable(false);
	getContentPane().add(item3);
	
	btnRun = new JButton("RUN");
	btnRun.setBounds(96, 179, 591, 39);
	btnRun.setBackground(Color.GREEN);
	getContentPane().add(btnRun);
	btnRun.addActionListener(handler);
	
	rdbtnNewRadioButton = new JRadioButton("Capture screenshot on Every Step");
	rdbtnNewRadioButton.setBounds(158, 246, 196, 23);
//	rdbtnNewRadioButton.setMnemonic(KeyEvent.VK_M);
	rdbtnNewRadioButton.addActionListener(handler);
	getContentPane().add(rdbtnNewRadioButton);
	rdbtnNewRadioButton.setActionCommand(Y);
//	rdbtnNewRadioButton.setEnabled(false);
	
	
	rdbtnNewRadioButton_1 = new JRadioButton("Capture screenshot only on error");
	rdbtnNewRadioButton_1.setBounds(428, 246, 185, 23);
//	rdbtnNewRadioButton_1.setMnemonic(KeyEvent.VK_M);
	rdbtnNewRadioButton_1.addActionListener(handler);
	rdbtnNewRadioButton_1.setActionCommand(N);
	rdbtnNewRadioButton_1.setSelected(true);
	getContentPane().add(rdbtnNewRadioButton_1);
	
	
	
		
	}
	
	public Properties getConfig() throws IOException
		{
			if (CONFIG == null){
			fs1 = new FileInputStream(item3.getText());
			//string = item2.getText();
			Properties CONFIG2 = new Properties();
	        CONFIG2.load(fs1);
	        return CONFIG2;
	        				
			}
			else 
		    return CONFIG;
	}
	
	public String getSelected() throws IOException
	{
		 if (screenshot_everystep=="Y") {
			 
			return screenshot_everystep;
	}
		 else {
			 screenshot_everystep = "N";
			 return screenshot_everystep;
		 }
			
}

	public Properties getGui() throws IOException
	{   
		if (OR == null){
		fs = new FileInputStream(item2.getText());
		//string = item2.getText();
		Properties OR2 = new Properties();
        OR2.load(fs);
        return OR2;
		
		}
		else 
	    return OR;
}
	
    private void customInit() {

        PrintStream ps = new PrintStream(getTextAreaOutputStream());
        System.setOut(ps);
//        System.setErr( ps );
      //   filePath.setText("/home/alex/Public/Book1.csv");
    }

    private TextAreaOutputStream getTextAreaOutputStream() {
        if(textAreaOutputStream == null)
        {
            textAreaOutputStream = new TextAreaOutputStream( textArea, 1000 );
        }
        return textAreaOutputStream;
    }
	
	class MyClass extends Thread {
		
		public void run() {
			
			string = item1.getText();
			
			DriverScript test = null;
			try {
				test = new DriverScript();
			} catch (NoSuchMethodException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (SecurityException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			try {
			    PrintStream printStream = new PrintStream(new TextAreaOutputStream(textArea));
			    
			    //  keeps reference of standard output stream
			      standardOut = System.out;
			       
			   //    re-assigns standard output stream and error output stream
			      System.setOut(printStream);
			      System.setErr(printStream);
				System.out.println("A inceput testarea");
				
				test.start(string);

				
				
			} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException
					| NoSuchMethodException | SecurityException | InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
		
	}
	

	
	
	
		public class thehandler implements ActionListener, MouseListener {
	    
		private JFileChooser fileChooser;
		
	/*	public void mouseClicked(MouseEvent event) {

			
		}
		
		
		public void mouseClicked(MouseEvent event) {
			// TODO Auto-generated method stub
			System.out.println("clicked");
			if (event.equals(rdbtnNewRadioButton)){
				string = "Y";
				radioGroup.clearSelection();
				
			}else if (event.get){
				string = "N";
				radioGroup.clearSelection();
				
			}
		}
		*/
		
		public void actionPerformed(ActionEvent event){
			if(event.getSource()==browse1){
				//string = String.format("field 1: %s", event.getActionCommand());
				
				  fileChooser = new JFileChooser();
				   
		          // For Directory
		          fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		   
		          // For File
		          //fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		   
		          fileChooser.setAcceptAllFileFilterUsed(false);
		   
		          int rVal = fileChooser.showOpenDialog(null);
		          if (rVal == JFileChooser.APPROVE_OPTION) 
		          item1.setText(fileChooser.getSelectedFile().toString());
					}
			else if (event.getSource()==browse2){
				
				//string = String.format("field 1: %s", event.getActionCommand());
				 fileChooser = new JFileChooser();
				 // For Directory
		          fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		          // For File
		          //fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		          fileChooser.setAcceptAllFileFilterUsed(false);
		          int rVal = fileChooser.showOpenDialog(null);
		          if (rVal == JFileChooser.APPROVE_OPTION) 				
				
				//string = String.format("field 2: %s", event.getActionCommand());
				item2.setText(fileChooser.getSelectedFile().toString());
				//FileInputStream fs;
				try {
				   fs = new FileInputStream(item2.getText());
				   System.out.println(item2.getText());
				//string = item2.getText();
				OR= new Properties();
			    OR.load(fs);
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			}else if (event.getSource()==browse3 ){
				
				//string = String.format("field 1: %s", event.getActionCommand());
				
				  JFileChooser fileChooser = new JFileChooser();
				   
		          // For Directory
		          fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		   
		          // For File
		          //fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		   
		          fileChooser.setAcceptAllFileFilterUsed(false);
		   
		          int rVal = fileChooser.showOpenDialog(null);
		          if (rVal == JFileChooser.APPROVE_OPTION) 
				
				//string = String.format("field 2: %s", event.getActionCommand());
				item3.setText(fileChooser.getSelectedFile().toString());
				
				try {
					fs1 = new FileInputStream(item2.getText());
				
				//string = item2.getText();
				CONFIG= new Properties();
		        CONFIG.load(fs1);
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}else if (event.getSource()==btnRun ){
			//	string = String.format("a inceput rularea programului %s", event.getActionCommand());
			//	JOptionPane.showMessageDialog(null, string);
				
				
				
			//	item1.setText(fileChooser.getSelectedFile().toString());
				
            MyClass myClass = new MyClass();
            myClass.start();
				
			}else if (event.getActionCommand().equals(Y)) {
				screenshot_everystep = "Y";
				rdbtnNewRadioButton_1.setSelected(false);
				
			}else {
				screenshot_everystep = "N";
				
				rdbtnNewRadioButton.setSelected(false);
			}
			//JOptionPane.showMessageDialog(null, string);
			
			
			/* 
			 * 
			 * 
			 * else if (event.getSource()==item3)
				string = String.format("field 3: %s", event.getActionCommand());
			else if (event.getSource()==passwordField)
				string = String.format("password field is : %s", event.getActionCommand());
			else if (rVal == JFileChooser.APPROVE_OPTION)
				item2.setText(fileChooser.getSelectedFile().toString());
			 * 
			 * 
			 * 
			 * 
			 * */
		
		    
		}

		@Override
		public void mouseClicked(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseExited(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mousePressed(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}


	}
}